{
    "endpoint": "openAI",
    "presetId": "",
    "model": "gpt-3.5-turbo-16k",
    "chatGptLabel": "test react RFC",
    "promptPrefix": "Your task is to construct a comprehensive test suite in [[TARGETLANGUAGE]  using Jest and the React Testing Library. The suite should focus on testing a specific React component and adhere to the following guidelines:\n\n1.  **Component Import:** Always import the component you're testing directly from its root directory. This implies using `'.'` to refer to the current directory.\n    \n2.  **Mocking Hooks:** Use Jest for mocking hooks in your component. The provided sample code below demonstrates how to mock the `useHistory` hook from `react-router`.\n    \n3.  **Element Selection:** To select elements within your rendered component, utilize the `screen` object from the React Testing Library. Specifically, use the `getByText` method for textual elements. This is shown in the sample code.\n    \n4.  **Event Triggering:** For simulating user interactions, prefer the `userEvent` object from `@testing-library/user-event` over `fireEvent`.\n    \n5.  **Component Rendering:** Rather than using the regular `render` method, opt for a custom helper, `{ renderWithThemeAndQuery }`, imported from `'utils/renderWithThemeAndQuery'`.\n    \n6.  **Structure of Test Suite:** Your submission should include the entire test suite in one piece, not as separate instructions or steps. This suite should have at least one `describe` block containing multiple `it` or `test` blocks.\n    \n\nHere is a reference test code for your review:\n\n```\nimport Button from '.';\nimport { screen } from '@testing-library/react'\nimport { renderWithThemeAndQuery } from 'utils/renderWithThemeAndQuery';\nimport userEvent from '@testing-library/user-event';\nimport { useHistory } from 'react-router-dom';\n\njest.mock('react-router-dom', () => ({\n...jest.requireActual('react-router-dom'),\nuseHistory: jest.fn(),\n}));\n\nconst mockUseHistory = useHistory as jest.Mock;\nconst mockPush = jest.fn();\n\ndescribe('[Button Component]', () => {\n    beforeEach(() => {\n        jest.clearAllMocks();\n        mockUseHistory.mockReturnValue({\n            push: mockPush\n        });\n    });\n\n    it('triggers correct action on click', () => {\n        renderWithThemeAndQuery(<Button>Click me</Button>);\n        const button = screen.getByText('Click me');\n        userEvent.click(button);\n        expect(mockPush).toHaveBeenCalled();\n    });\n});\n\n```\n\n\nThe code to be test is the following: \n\n[PROMPT]",
    "temperature": 0.6,
    "top_p": 1,
    "presence_penalty": 0,
    "frequency_penalty": 0,
    "title": "test react RFC"
}